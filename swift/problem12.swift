/*
 Problem 12
 
 The sequence of triangle numbers is generated by adding the natural numbers.
 So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 ten terms would be:
 
 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 
 Let us list the factors of the first seven triangle numbers:
 
 1: 1
 3: 1,3
 6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28
 
 We can see that 28 is the first triangle number to have over five divisors.
 
 What is the value of the first triangle number to have over five hundred
 divisors?
 */

import Foundation

// count factors of number
func countFactors(of number: Int) -> Int {
    var result = 0

    for i in 1..<Int(ceil(Double(number).squareRoot())) {
        if number % i == 0 { result += 2 }
    }
    
    return result
}

// first triangle number with factors over number
func firstTriangleNumberWithFactors(over number:  Int) -> Int {
    var result = 0

    for i in 1..<Int.max {
        result = (i * (i + 1)) / 2  // triangle number formula

        if countFactors(of: result) > number { break }
    }

    return result
}

// benchmark
let limit = 500
let startTime = CFAbsoluteTimeGetCurrent()
let result = firstTriangleNumberWithFactors(over: limit)
let elapsedTime = CFAbsoluteTimeGetCurrent() - startTime

print("expected: 76_576_500, result: \(result), elapsedTime: \(elapsedTime)")

// runs in 334ms
