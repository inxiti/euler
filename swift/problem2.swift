/*
 Problem 2
 
 Each new term in the Fibonacci sequence is generated by adding the previous two
 terms. By starting with 1 and 2, the first 10 terms will be:
 
 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 
 By considering the terms in the Fibonacci sequence whose values do not exceed
 four million, find the sum of the even-valued terms.
 */

import Foundation

// generate and return a list of numbers via fibonacci sequence up to the limit
func fibonacciList(upTo limit: Int) -> [Int] {
    var (a, b) = (0, 1)     // initial fibonacci sequence numbers
    var result = [b]   // initial value for sequence to return

    while a + b < limit {
        (b, a) = (a + b, result.last!)
        result.append(b)
    }
    
    return result
}

// sum all even numbers in fibonacci lists
func sumEvenNumbersInFibonacciList(upTo n: Int) -> Int {
    return fibonacciList(upTo: n).filter { $0 % 2 == 0 }.reduce(0, +)
}

// benchmark
let limit = 4_000_000
let startTime = CFAbsoluteTimeGetCurrent()
let result = sumEvenNumbersInFibonacciList(upTo: limit)
let elapsedTime = CFAbsoluteTimeGetCurrent() - startTime

print("expected: 4_613_732, result: \(result), elapsedTime: \(elapsedTime)")

// runs in 0.16ms
